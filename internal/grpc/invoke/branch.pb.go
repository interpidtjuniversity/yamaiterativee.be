// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: branch.proto

package invoke

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Repository string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch     string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	IsLock     bool   `protobuf:"varint,5,opt,name=isLock,proto3" json:"isLock,omitempty"`
	NeedMr     bool   `protobuf:"varint,6,opt,name=needMr,proto3" json:"needMr,omitempty"`
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBranchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateBranchRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateBranchRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *CreateBranchRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateBranchRequest) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

func (x *CreateBranchRequest) GetNeedMr() bool {
	if x != nil {
		return x.NeedMr
	}
	return false
}

type CreateBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreateBranchResponse) Reset() {
	*x = CreateBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchResponse) ProtoMessage() {}

func (x *CreateBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBranchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Repository string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch     string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteBranchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteBranchRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DeleteBranchRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *DeleteBranchRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type DeleteBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteBranchResponse) Reset() {
	*x = DeleteBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchResponse) ProtoMessage() {}

func (x *DeleteBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchResponse.ProtoReflect.Descriptor instead.
func (*DeleteBranchResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteBranchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Merge2BranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Repository   string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	SourceBranch string `protobuf:"bytes,4,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,5,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	MergeInfo    string `protobuf:"bytes,6,opt,name=mergeInfo,proto3" json:"mergeInfo,omitempty"`
}

func (x *Merge2BranchRequest) Reset() {
	*x = Merge2BranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Merge2BranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Merge2BranchRequest) ProtoMessage() {}

func (x *Merge2BranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Merge2BranchRequest.ProtoReflect.Descriptor instead.
func (*Merge2BranchRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{4}
}

func (x *Merge2BranchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Merge2BranchRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Merge2BranchRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Merge2BranchRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *Merge2BranchRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *Merge2BranchRequest) GetMergeInfo() string {
	if x != nil {
		return x.MergeInfo
	}
	return ""
}

type Merge2BranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Merge2BranchResponse) Reset() {
	*x = Merge2BranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Merge2BranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Merge2BranchResponse) ProtoMessage() {}

func (x *Merge2BranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Merge2BranchResponse.ProtoReflect.Descriptor instead.
func (*Merge2BranchResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{5}
}

func (x *Merge2BranchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ConflictDetectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository   string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	SourceBranch string `protobuf:"bytes,2,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,3,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
}

func (x *ConflictDetectRequest) Reset() {
	*x = ConflictDetectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictDetectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictDetectRequest) ProtoMessage() {}

func (x *ConflictDetectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictDetectRequest.ProtoReflect.Descriptor instead.
func (*ConflictDetectRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{6}
}

func (x *ConflictDetectRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ConflictDetectRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *ConflictDetectRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

type ConflictDetectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasConflict     bool   `protobuf:"varint,1,opt,name=hasConflict,proto3" json:"hasConflict,omitempty"`
	ShowConflictUri string `protobuf:"bytes,2,opt,name=showConflictUri,proto3" json:"showConflictUri,omitempty"`
}

func (x *ConflictDetectResponse) Reset() {
	*x = ConflictDetectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictDetectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictDetectResponse) ProtoMessage() {}

func (x *ConflictDetectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictDetectResponse.ProtoReflect.Descriptor instead.
func (*ConflictDetectResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{7}
}

func (x *ConflictDetectResponse) GetHasConflict() bool {
	if x != nil {
		return x.HasConflict
	}
	return false
}

func (x *ConflictDetectResponse) GetShowConflictUri() string {
	if x != nil {
		return x.ShowConflictUri
	}
	return ""
}

type RegisterMRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName    string   `protobuf:"bytes,1,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	RepoName     string   `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	SourceBranch string   `protobuf:"bytes,3,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string   `protobuf:"bytes,4,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	ActionId     int64    `protobuf:"varint,5,opt,name=actionId,proto3" json:"actionId,omitempty"`
	StagedId     int64    `protobuf:"varint,6,opt,name=stagedId,proto3" json:"stagedId,omitempty"`
	StepId       int64    `protobuf:"varint,7,opt,name=stepId,proto3" json:"stepId,omitempty"`
	Reviewers    []string `protobuf:"bytes,8,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
}

func (x *RegisterMRRequest) Reset() {
	*x = RegisterMRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMRRequest) ProtoMessage() {}

func (x *RegisterMRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMRRequest.ProtoReflect.Descriptor instead.
func (*RegisterMRRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterMRRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *RegisterMRRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RegisterMRRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *RegisterMRRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *RegisterMRRequest) GetActionId() int64 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *RegisterMRRequest) GetStagedId() int64 {
	if x != nil {
		return x.StagedId
	}
	return 0
}

func (x *RegisterMRRequest) GetStepId() int64 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *RegisterMRRequest) GetReviewers() []string {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

type RegisterMRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowDiffUri string `protobuf:"bytes,1,opt,name=showDiffUri,proto3" json:"showDiffUri,omitempty"`
	MRId        int64  `protobuf:"varint,2,opt,name=MRId,json=mRId,proto3" json:"MRId,omitempty"`
}

func (x *RegisterMRResponse) Reset() {
	*x = RegisterMRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMRResponse) ProtoMessage() {}

func (x *RegisterMRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMRResponse.ProtoReflect.Descriptor instead.
func (*RegisterMRResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterMRResponse) GetShowDiffUri() string {
	if x != nil {
		return x.ShowDiffUri
	}
	return ""
}

func (x *RegisterMRResponse) GetMRId() int64 {
	if x != nil {
		return x.MRId
	}
	return 0
}

type CommitQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName  string `protobuf:"bytes,1,opt,name=ownerName,proto3" json:"ownerName,omitempty"` // repoName like /:userName/:repoName
	RepoName   string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	BranchName string `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *CommitQueryRequest) Reset() {
	*x = CommitQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitQueryRequest) ProtoMessage() {}

func (x *CommitQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitQueryRequest.ProtoReflect.Descriptor instead.
func (*CommitQueryRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{10}
}

func (x *CommitQueryRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *CommitQueryRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *CommitQueryRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type CommitQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitId string `protobuf:"bytes,1,opt,name=commitId,proto3" json:"commitId,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CommitQueryResponse) Reset() {
	*x = CommitQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitQueryResponse) ProtoMessage() {}

func (x *CommitQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitQueryResponse.ProtoReflect.Descriptor instead.
func (*CommitQueryResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{11}
}

func (x *CommitQueryResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *CommitQueryResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MasterLatestCommitQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	RepoName  string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
}

func (x *MasterLatestCommitQueryRequest) Reset() {
	*x = MasterLatestCommitQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterLatestCommitQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterLatestCommitQueryRequest) ProtoMessage() {}

func (x *MasterLatestCommitQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterLatestCommitQueryRequest.ProtoReflect.Descriptor instead.
func (*MasterLatestCommitQueryRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{12}
}

func (x *MasterLatestCommitQueryRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *MasterLatestCommitQueryRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type MasterLatestCommitQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitId string `protobuf:"bytes,1,opt,name=commitId,proto3" json:"commitId,omitempty"`
}

func (x *MasterLatestCommitQueryResponse) Reset() {
	*x = MasterLatestCommitQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterLatestCommitQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterLatestCommitQueryResponse) ProtoMessage() {}

func (x *MasterLatestCommitQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterLatestCommitQueryResponse.ProtoReflect.Descriptor instead.
func (*MasterLatestCommitQueryResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{13}
}

func (x *MasterLatestCommitQueryResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

type QueryAppAllBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppOwner string `protobuf:"bytes,1,opt,name=appOwner,proto3" json:"appOwner,omitempty"`
	AppName  string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
}

func (x *QueryAppAllBranchRequest) Reset() {
	*x = QueryAppAllBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAppAllBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAppAllBranchRequest) ProtoMessage() {}

func (x *QueryAppAllBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAppAllBranchRequest.ProtoReflect.Descriptor instead.
func (*QueryAppAllBranchRequest) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{14}
}

func (x *QueryAppAllBranchRequest) GetAppOwner() string {
	if x != nil {
		return x.AppOwner
	}
	return ""
}

func (x *QueryAppAllBranchRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type QueryAppAllBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppBranches []string `protobuf:"bytes,1,rep,name=appBranches,proto3" json:"appBranches,omitempty"`
}

func (x *QueryAppAllBranchResponse) Reset() {
	*x = QueryAppAllBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAppAllBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAppAllBranchResponse) ProtoMessage() {}

func (x *QueryAppAllBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAppAllBranchResponse.ProtoReflect.Descriptor instead.
func (*QueryAppAllBranchResponse) Descriptor() ([]byte, []int) {
	return file_branch_proto_rawDescGZIP(), []int{15}
}

func (x *QueryAppAllBranchResponse) GetAppBranches() []string {
	if x != nil {
		return x.AppBranches
	}
	return nil
}

var File_branch_proto protoreflect.FileDescriptor

var file_branch_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x72, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x30, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x32, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x32, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x64, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x83, 0x02, 0x0a,
	0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x65, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x52,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x44, 0x69, 0x66, 0x66, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x44, 0x69, 0x66, 0x66, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x52,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x52, 0x49, 0x64, 0x22, 0x6e,
	0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43,
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x5a, 0x0a, 0x1e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x3d, 0x0a, 0x1f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x50,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x3d, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x41, 0x6c, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x32,
	0xb5, 0x05, 0x0a, 0x14, 0x59, 0x61, 0x4d, 0x61, 0x48, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x32, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x32, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x32, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x32, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x70, 0x70, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x70, 0x70, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e,
	0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_branch_proto_rawDescOnce sync.Once
	file_branch_proto_rawDescData = file_branch_proto_rawDesc
)

func file_branch_proto_rawDescGZIP() []byte {
	file_branch_proto_rawDescOnce.Do(func() {
		file_branch_proto_rawDescData = protoimpl.X.CompressGZIP(file_branch_proto_rawDescData)
	})
	return file_branch_proto_rawDescData
}

var file_branch_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_branch_proto_goTypes = []interface{}{
	(*CreateBranchRequest)(nil),             // 0: proto.CreateBranchRequest
	(*CreateBranchResponse)(nil),            // 1: proto.CreateBranchResponse
	(*DeleteBranchRequest)(nil),             // 2: proto.DeleteBranchRequest
	(*DeleteBranchResponse)(nil),            // 3: proto.DeleteBranchResponse
	(*Merge2BranchRequest)(nil),             // 4: proto.Merge2BranchRequest
	(*Merge2BranchResponse)(nil),            // 5: proto.Merge2BranchResponse
	(*ConflictDetectRequest)(nil),           // 6: proto.ConflictDetectRequest
	(*ConflictDetectResponse)(nil),          // 7: proto.ConflictDetectResponse
	(*RegisterMRRequest)(nil),               // 8: proto.RegisterMRRequest
	(*RegisterMRResponse)(nil),              // 9: proto.RegisterMRResponse
	(*CommitQueryRequest)(nil),              // 10: proto.CommitQueryRequest
	(*CommitQueryResponse)(nil),             // 11: proto.CommitQueryResponse
	(*MasterLatestCommitQueryRequest)(nil),  // 12: proto.MasterLatestCommitQueryRequest
	(*MasterLatestCommitQueryResponse)(nil), // 13: proto.MasterLatestCommitQueryResponse
	(*QueryAppAllBranchRequest)(nil),        // 14: proto.QueryAppAllBranchRequest
	(*QueryAppAllBranchResponse)(nil),       // 15: proto.QueryAppAllBranchResponse
}
var file_branch_proto_depIdxs = []int32{
	0,  // 0: proto.YaMaHubBranchService.CreateBranch:input_type -> proto.CreateBranchRequest
	2,  // 1: proto.YaMaHubBranchService.DeleteBranch:input_type -> proto.DeleteBranchRequest
	4,  // 2: proto.YaMaHubBranchService.Merge2Branch:input_type -> proto.Merge2BranchRequest
	6,  // 3: proto.YaMaHubBranchService.Query2BranchConflict:input_type -> proto.ConflictDetectRequest
	8,  // 4: proto.YaMaHubBranchService.RegisterMergeRequest:input_type -> proto.RegisterMRRequest
	10, // 5: proto.YaMaHubBranchService.QueryRepoBranchCommit:input_type -> proto.CommitQueryRequest
	12, // 6: proto.YaMaHubBranchService.QueryMasterLatestCommit:input_type -> proto.MasterLatestCommitQueryRequest
	14, // 7: proto.YaMaHubBranchService.QueryAppAllBranch:input_type -> proto.QueryAppAllBranchRequest
	1,  // 8: proto.YaMaHubBranchService.CreateBranch:output_type -> proto.CreateBranchResponse
	3,  // 9: proto.YaMaHubBranchService.DeleteBranch:output_type -> proto.DeleteBranchResponse
	5,  // 10: proto.YaMaHubBranchService.Merge2Branch:output_type -> proto.Merge2BranchResponse
	7,  // 11: proto.YaMaHubBranchService.Query2BranchConflict:output_type -> proto.ConflictDetectResponse
	9,  // 12: proto.YaMaHubBranchService.RegisterMergeRequest:output_type -> proto.RegisterMRResponse
	11, // 13: proto.YaMaHubBranchService.QueryRepoBranchCommit:output_type -> proto.CommitQueryResponse
	13, // 14: proto.YaMaHubBranchService.QueryMasterLatestCommit:output_type -> proto.MasterLatestCommitQueryResponse
	15, // 15: proto.YaMaHubBranchService.QueryAppAllBranch:output_type -> proto.QueryAppAllBranchResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_branch_proto_init() }
func file_branch_proto_init() {
	if File_branch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_branch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Merge2BranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Merge2BranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictDetectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictDetectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterLatestCommitQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterLatestCommitQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAppAllBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAppAllBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_branch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_branch_proto_goTypes,
		DependencyIndexes: file_branch_proto_depIdxs,
		MessageInfos:      file_branch_proto_msgTypes,
	}.Build()
	File_branch_proto = out.File
	file_branch_proto_rawDesc = nil
	file_branch_proto_goTypes = nil
	file_branch_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YaMaHubBranchServiceClient is the client API for YaMaHubBranchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YaMaHubBranchServiceClient interface {
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error)
	Merge2Branch(ctx context.Context, in *Merge2BranchRequest, opts ...grpc.CallOption) (*Merge2BranchResponse, error)
	Query2BranchConflict(ctx context.Context, in *ConflictDetectRequest, opts ...grpc.CallOption) (*ConflictDetectResponse, error)
	RegisterMergeRequest(ctx context.Context, in *RegisterMRRequest, opts ...grpc.CallOption) (*RegisterMRResponse, error)
	QueryRepoBranchCommit(ctx context.Context, in *CommitQueryRequest, opts ...grpc.CallOption) (*CommitQueryResponse, error)
	QueryMasterLatestCommit(ctx context.Context, in *MasterLatestCommitQueryRequest, opts ...grpc.CallOption) (*MasterLatestCommitQueryResponse, error)
	QueryAppAllBranch(ctx context.Context, in *QueryAppAllBranchRequest, opts ...grpc.CallOption) (*QueryAppAllBranchResponse, error)
}

type yaMaHubBranchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYaMaHubBranchServiceClient(cc grpc.ClientConnInterface) YaMaHubBranchServiceClient {
	return &yaMaHubBranchServiceClient{cc}
}

func (c *yaMaHubBranchServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaMaHubBranchServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error) {
	out := new(DeleteBranchResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaMaHubBranchServiceClient) Merge2Branch(ctx context.Context, in *Merge2BranchRequest, opts ...grpc.CallOption) (*Merge2BranchResponse, error) {
	out := new(Merge2BranchResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/Merge2Branch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaMaHubBranchServiceClient) Query2BranchConflict(ctx context.Context, in *ConflictDetectRequest, opts ...grpc.CallOption) (*ConflictDetectResponse, error) {
	out := new(ConflictDetectResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/Query2BranchConflict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaMaHubBranchServiceClient) RegisterMergeRequest(ctx context.Context, in *RegisterMRRequest, opts ...grpc.CallOption) (*RegisterMRResponse, error) {
	out := new(RegisterMRResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/RegisterMergeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaMaHubBranchServiceClient) QueryRepoBranchCommit(ctx context.Context, in *CommitQueryRequest, opts ...grpc.CallOption) (*CommitQueryResponse, error) {
	out := new(CommitQueryResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/QueryRepoBranchCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaMaHubBranchServiceClient) QueryMasterLatestCommit(ctx context.Context, in *MasterLatestCommitQueryRequest, opts ...grpc.CallOption) (*MasterLatestCommitQueryResponse, error) {
	out := new(MasterLatestCommitQueryResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/QueryMasterLatestCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yaMaHubBranchServiceClient) QueryAppAllBranch(ctx context.Context, in *QueryAppAllBranchRequest, opts ...grpc.CallOption) (*QueryAppAllBranchResponse, error) {
	out := new(QueryAppAllBranchResponse)
	err := c.cc.Invoke(ctx, "/proto.YaMaHubBranchService/QueryAppAllBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YaMaHubBranchServiceServer is the server API for YaMaHubBranchService service.
type YaMaHubBranchServiceServer interface {
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error)
	Merge2Branch(context.Context, *Merge2BranchRequest) (*Merge2BranchResponse, error)
	Query2BranchConflict(context.Context, *ConflictDetectRequest) (*ConflictDetectResponse, error)
	RegisterMergeRequest(context.Context, *RegisterMRRequest) (*RegisterMRResponse, error)
	QueryRepoBranchCommit(context.Context, *CommitQueryRequest) (*CommitQueryResponse, error)
	QueryMasterLatestCommit(context.Context, *MasterLatestCommitQueryRequest) (*MasterLatestCommitQueryResponse, error)
	QueryAppAllBranch(context.Context, *QueryAppAllBranchRequest) (*QueryAppAllBranchResponse, error)
}

// UnimplementedYaMaHubBranchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedYaMaHubBranchServiceServer struct {
}

func (*UnimplementedYaMaHubBranchServiceServer) CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (*UnimplementedYaMaHubBranchServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (*UnimplementedYaMaHubBranchServiceServer) Merge2Branch(context.Context, *Merge2BranchRequest) (*Merge2BranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge2Branch not implemented")
}
func (*UnimplementedYaMaHubBranchServiceServer) Query2BranchConflict(context.Context, *ConflictDetectRequest) (*ConflictDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query2BranchConflict not implemented")
}
func (*UnimplementedYaMaHubBranchServiceServer) RegisterMergeRequest(context.Context, *RegisterMRRequest) (*RegisterMRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMergeRequest not implemented")
}
func (*UnimplementedYaMaHubBranchServiceServer) QueryRepoBranchCommit(context.Context, *CommitQueryRequest) (*CommitQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRepoBranchCommit not implemented")
}
func (*UnimplementedYaMaHubBranchServiceServer) QueryMasterLatestCommit(context.Context, *MasterLatestCommitQueryRequest) (*MasterLatestCommitQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMasterLatestCommit not implemented")
}
func (*UnimplementedYaMaHubBranchServiceServer) QueryAppAllBranch(context.Context, *QueryAppAllBranchRequest) (*QueryAppAllBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppAllBranch not implemented")
}

func RegisterYaMaHubBranchServiceServer(s *grpc.Server, srv YaMaHubBranchServiceServer) {
	s.RegisterService(&_YaMaHubBranchService_serviceDesc, srv)
}

func _YaMaHubBranchService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaMaHubBranchService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaMaHubBranchService_Merge2Branch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Merge2BranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).Merge2Branch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/Merge2Branch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).Merge2Branch(ctx, req.(*Merge2BranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaMaHubBranchService_Query2BranchConflict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConflictDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).Query2BranchConflict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/Query2BranchConflict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).Query2BranchConflict(ctx, req.(*ConflictDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaMaHubBranchService_RegisterMergeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).RegisterMergeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/RegisterMergeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).RegisterMergeRequest(ctx, req.(*RegisterMRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaMaHubBranchService_QueryRepoBranchCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).QueryRepoBranchCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/QueryRepoBranchCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).QueryRepoBranchCommit(ctx, req.(*CommitQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaMaHubBranchService_QueryMasterLatestCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterLatestCommitQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).QueryMasterLatestCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/QueryMasterLatestCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).QueryMasterLatestCommit(ctx, req.(*MasterLatestCommitQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YaMaHubBranchService_QueryAppAllBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppAllBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YaMaHubBranchServiceServer).QueryAppAllBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YaMaHubBranchService/QueryAppAllBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YaMaHubBranchServiceServer).QueryAppAllBranch(ctx, req.(*QueryAppAllBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YaMaHubBranchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.YaMaHubBranchService",
	HandlerType: (*YaMaHubBranchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBranch",
			Handler:    _YaMaHubBranchService_CreateBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _YaMaHubBranchService_DeleteBranch_Handler,
		},
		{
			MethodName: "Merge2Branch",
			Handler:    _YaMaHubBranchService_Merge2Branch_Handler,
		},
		{
			MethodName: "Query2BranchConflict",
			Handler:    _YaMaHubBranchService_Query2BranchConflict_Handler,
		},
		{
			MethodName: "RegisterMergeRequest",
			Handler:    _YaMaHubBranchService_RegisterMergeRequest_Handler,
		},
		{
			MethodName: "QueryRepoBranchCommit",
			Handler:    _YaMaHubBranchService_QueryRepoBranchCommit_Handler,
		},
		{
			MethodName: "QueryMasterLatestCommit",
			Handler:    _YaMaHubBranchService_QueryMasterLatestCommit_Handler,
		},
		{
			MethodName: "QueryAppAllBranch",
			Handler:    _YaMaHubBranchService_QueryAppAllBranch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch.proto",
}
